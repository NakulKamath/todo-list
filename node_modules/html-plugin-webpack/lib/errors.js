// @ts-nocheck
'use strict';


const colors = require('colors'); // 这里使用了 `colors` 库来给输出着色

function PrettyError(err) {
  console.error("Error: ".red + err.message); // 输出错误信息并着色
  if (err.stack) {
    console.error("Stack: ".red + err.stack); // 输出堆栈信息并着色
  }
}

let prettyError;

function getPrettyError () {
  if (!prettyError) {
    // lazily require to improve startup time since pretty-error is rather heavy package
    // const PrettyError = require('pretty-error');
    prettyError = new PrettyError();
    // prettyError.withoutColors();
    // prettyError.skipPackage('html-plugin-evaluation');
    // prettyError.skipNodeFiles();
    // prettyError.skip(function (traceLine) {
    //   return traceLine.path === 'html-plugin-evaluation';
    // });
  }
  return prettyError;
}

module.exports = function (err, context) {
  return {
    toHtml: function () {
      return 'Html Webpack Plugin:\n<pre>\n' + this.toString() + '</pre>';
    },
    toJsonHtml: function () {
      return JSON.stringify(this.toHtml());
    },
    toString: function () {
      try {
        return getPrettyError().render(err).replace(/webpack:\/\/\/\./g, context);
      } catch (e) {
        // This can sometimes fail. We don't know why, but returning the
        // original error is better than returning the error thrown by
        // pretty-error.
        return err;
      }
    }
  };
};
